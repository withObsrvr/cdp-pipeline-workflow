# Example configuration for Contract Invocation Processor V2
# This processor captures complete auth trees and cross-contract call chains,
# emitting a flattened stream of enriched events

pipelines:
  # Example 1: Basic V2 processor with event-per-message output
  ContractInvocationsV2Basic:
    source:
      type: BufferedStorageSourceAdapter
      config:
        bucket_name: "obsrvr-stellar-ledger-data-testnet-data/landing/ledgers/testnet"
        network: "testnet"
        num_workers: 10
        retry_limit: 3
        retry_wait: 5
        start_ledger: 84100
        end_ledger: 84300
        ledgers_per_file: 1
        files_per_partition: 64000
    processors:
      - type: ContractInvocationV2
        config:
          network_passphrase: "Test SDF Network ; September 2015"
          output_mode: "event_per_message"  # Each event sent separately
          include_raw_xdr: true            # Include raw XDR for downstream processing
          include_auth_proof: true         # Generate cryptographic auth proofs
          max_call_depth: 10              # Safety limit for recursive calls
    consumers:
      - type: SaveToPostgreSQL
        config:
          host: "localhost"
          port: 5432
          database: "obsrvr_enriched_events"
          username: "postgres"
          password: "SecurePassword"
          sslmode: "disable"
          table: "enriched_events"
          max_open_conns: 10
          max_idle_conns: 5

  # Example 2: V2 processor with transaction bundling and filtering
  ContractInvocationsV2Filtered:
    source:
      type: CaptiveCoreInboundAdapter
      config:
        network: "mainnet"
        start_ledger: "now"
        binary_path: "/usr/bin/stellar-core"
        core_config_path: "/etc/stellar-core.cfg"
        storage_path: "/var/lib/stellar-core"
    processors:
      - type: ContractInvocationV2
        config:
          network_passphrase: "Public Global Stellar Network ; September 2015"
          output_mode: "transaction_bundle"  # Bundle all events per transaction
          include_raw_xdr: false            # Save space, only decoded data
          include_auth_proof: true
          max_call_depth: 15
          event_filters:
            # Only process events from specific contracts
            contract_ids:
              - "CASJKXVOKEBFC6HRNLLZKMEFJXYS3S5GOXM5DQRD7NDPIOQHCPAOLH7O"  # Carbon sink
              - "CA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAA"  # Example token
            # Only capture specific event types
            event_types:
              - "transfer"
              - "mint"
              - "burn"
              - "swap"
              - "carbon_retired"
            # Only from specific functions
            functions:
              - "sink_carbon"
              - "transfer"
              - "swap_exact_amount_in"
    consumers:
      - type: SaveToClickHouse
        config:
          hosts: ["localhost:9000"]
          database: "stellar_events"
          table: "enriched_events_v2"
          username: "default"
          password: ""
          batch_size: 1000
          flush_interval: 5

  # Example 3: V2 processor for DEX analysis with cross-contract tracking
  DEXCrossContractAnalysis:
    source:
      type: BufferedStorageSourceAdapter
      config:
        bucket_name: "stellar-ledgers-mainnet"
        network: "mainnet"
        start_ledger: 51000000
        end_ledger: 51001000
    processors:
      - type: ContractInvocationV2
        config:
          network_passphrase: "Public Global Stellar Network ; September 2015"
          output_mode: "event_per_message"
          include_raw_xdr: true
          include_auth_proof: true
          max_call_depth: 20  # DEX operations can have deep call chains
          event_filters:
            # Focus on DEX-related functions
            functions:
              - "swap"
              - "swap_exact_amount_in"
              - "swap_exact_amount_out"
              - "add_liquidity"
              - "remove_liquidity"
              - "transfer"  # Include token transfers in swaps
    consumers:
      # Send to multiple consumers for different analyses
      - type: SaveToWebSocket
        config:
          port: 8080
          path: "/events"
          buffer_size: 1000
      - type: SaveToRedis
        config:
          address: "localhost:6379"
          password: ""
          db: 0
          key_prefix: "dex_event:"
          ttl: 3600  # 1 hour TTL
      - type: NotificationDispatcher
        config:
          webhook_url: "https://analytics.example.com/webhook"
          event_types:
            - "swap"
          min_amount: 1000000  # Only notify for large swaps

  # Example 4: V2 processor with flowctl integration
  ContractInvocationsV2WithFlowctl:
    source:
      type: RpcAdapter
      config:
        rpc_url: "https://soroban-testnet.stellar.org"
        network_passphrase: "Test SDF Network ; September 2015"
        start_ledger: "latest"
    processors:
      - type: ContractInvocationV2
        config:
          network_passphrase: "Test SDF Network ; September 2015"
          output_mode: "event_per_message"
          include_raw_xdr: false
          include_auth_proof: true
          max_call_depth: 10
          # No filters - capture everything for monitoring
    consumers:
      - type: SaveToMongoDB
        config:
          uri: "mongodb://localhost:27017"
          database: "stellar_events"
          collection: "contract_invocations_v2"
          batch_size: 100
      # Also save metrics for flowctl monitoring
      - type: StdoutConsumer  # For debugging/monitoring

# Environment variables can override specific settings:
# export CDP_V2_OUTPUT_MODE=transaction_bundle
# export CDP_V2_MAX_DEPTH=25
# export FLOWCTL_ENDPOINT=localhost:8080