# Wallet Backend Unified Pipeline Configuration Template
# Copy this file to wallet_backend_unified.secret.yaml and fill in your actual values

pipelines:
  WalletBackendUnified:
    source:
      type: BufferedStorageSourceAdapter
      config:
        bucket_name: "YOUR_BUCKET_NAME"  # e.g., "obsrvr-stellar-ledger-data-pubnet-data/landing/ledgers/pubnet"
        network: "mainnet"
        buffer_size: 1000
        num_workers: 20
        retry_limit: 3
        retry_wait: 5
        start_ledger: 0
        ledgers_per_file: 1
        files_per_partition: 64000
        # AWS credentials (if using S3)
        # aws_access_key_id: "YOUR_ACCESS_KEY"
        # aws_secret_access_key: "YOUR_SECRET_KEY"
        # aws_region: "us-east-1"
    
    processors:
      # 1. Extract raw XDR data first
      - type: TransactionXDRExtractor
        config: {}
      
      # 2. Extract state changes
      - type: WalletBackend
        config:
          extract_contract_events: false
          track_participants: true
      
      # 3. Extract participants
      - type: ParticipantExtractor
        config: {}
      
      # 4. Generate effects
      - type: StellarEffects
        config:
          network_passphrase: "Public Global Stellar Network ; September 2015"
      
      # 5. Extract current account states
      - type: ProcessAccountDataFull
        config:
          network_passphrase: "Public Global Stellar Network ; September 2015"
    
    consumers:
      # Single consumer that handles all data types
      - type: WalletBackendPostgreSQL
        config:
          host: "YOUR_DB_HOST"
          port: 5432
          database: "YOUR_DB_NAME"
          username: "YOUR_DB_USER"
          password: "YOUR_DB_PASSWORD"
          sslmode: "require"
          
          # Performance tuning
          buffer_size: 1000
          flush_interval_ms: 5000
          max_retries: 3
          retry_delay_ms: 1000
          
          # Connection pooling
          max_open_conns: 20
          max_idle_conns: 10
          
          # Schema options
          create_schema: true
          drop_existing: false