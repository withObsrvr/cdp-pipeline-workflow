package processor

import (
	"context"
	"database/sql"
	"fmt"
	"sync"
	"time"

	"github.com/stellar/go/ingest"
	"github.com/stellar/go/strkey"
	"github.com/stellar/go/xdr"
)

type ContractDataProcessor struct {
	processors        []Processor
	watchedContracts  map[string]bool
	db                *sql.DB
	networkPassphrase string
	transformData     *TransformContractDataStruct
	mu                sync.RWMutex
	// Track processed ledgers
	processedLedgers map[uint32]bool
	// Add metrics
	stats ContractProcessingStats
}

type ContractProcessingStats struct {
	ProcessedLedgers    uint32
	ProcessedChanges    uint64
	SuccessfulChanges   uint64
	FailedChanges       uint64
	LastProcessedLedger uint32
	StartTime           time.Time
	LastUpdateTime      time.Time
	mu                  sync.RWMutex
}

func NewContractDataProcessor(config map[string]interface{}) (*ContractDataProcessor, error) {
	watchlistPath, ok := config["watchlist_path"].(string)
	if !ok {
		watchlistPath = "watchlist.json"
	}

	dbPath, ok := config["db_path"].(string)
	if !ok {
		dbPath = "contract_data.duckdb"
	}

	networkPassphrase, ok := config["network_passphrase"].(string)
	if !ok {
		networkPassphrase = "Test SDF Network ; September 2015"
	}

	watchedContracts, err := loadWatchlist(watchlistPath)
	if err != nil {
		return nil, fmt.Errorf("failed to load watchlist: %w", err)
	}

	db, err := initializeDatabase(dbPath)
	if err != nil {
		return nil, fmt.Errorf("failed to initialize database: %w", err)
	}

	transformData := NewTransformContractDataStruct(AssetFromContractData, ContractBalanceFromContractData)

	return &ContractDataProcessor{
		watchedContracts:  watchedContracts,
		db:                db,
		networkPassphrase: networkPassphrase,
		transformData:     transformData,
		processedLedgers:  make(map[uint32]bool),
		stats: ContractProcessingStats{
			StartTime: time.Now(),
		},
	}, nil
}

func (p *ContractDataProcessor) Subscribe(processor Processor) {
	p.processors = append(p.processors, processor)
}

func (p *ContractDataProcessor) Process(ctx context.Context, msg Message) error {
	// Handle both CDP Change and Soroban Event types
	switch payload := msg.Payload.(type) {
	case ingest.Change:
		return p.processChange(ctx, payload)
	case Event:
		return p.processSorobanEvent(ctx, payload)
	default:
		return fmt.Errorf("unsupported payload type: %T", msg.Payload)
	}
}

func (p *ContractDataProcessor) processChange(ctx context.Context, change ingest.Change) error {
	// Skip if not contract data
	if change.Type != xdr.LedgerEntryTypeContractData {
		return nil
	}

	p.stats.mu.Lock()
	p.stats.ProcessedChanges++
	p.stats.mu.Unlock()

	// Extract entry and ledger info
	entry, changeType, deleted, err := ExtractEntryFromChange(change)
	if err != nil {
		p.stats.mu.Lock()
		p.stats.FailedChanges++
		p.stats.mu.Unlock()
		return fmt.Errorf("failed to extract entry: %w", err)
	}

	// Get contract ID
	contractData, ok := entry.Data.GetContractData()
	if !ok {
		return nil
	}

	contractID, ok := contractData.Contract.GetContractId()
	if !ok {
		return nil
	}

	// Convert to string format
	contractIDStr, err := strkey.Encode(strkey.VersionByteContract, contractID[:])
	if err != nil {
		return fmt.Errorf("failed to encode contract ID: %w", err)
	}

	// Check if we're watching this contract
	p.mu.RLock()
	_, watching := p.watchedContracts[contractIDStr]
	p.mu.RUnlock()
	if !watching {
		return nil
	}

	// Get current ledger info
	ledgerSeq := entry.LastModifiedLedgerSeq

	// Transform the data
	transformedData := ContractDataOutput{
		ContractId:         contractIDStr,
		LastModifiedLedger: uint32(ledgerSeq),
		LedgerEntryChange:  uint32(changeType),
		Deleted:            deleted,
	}

	// Add asset info if available
	if asset := AssetFromContractData(entry, p.networkPassphrase); asset != nil {
		transformedData.ContractDataAssetType = asset.Type.String()
		transformedData.ContractDataAssetCode = asset.GetCode()
		transformedData.ContractDataAssetIssuer = asset.GetIssuer()
	}

	// Add balance info if available
	if holder, balance, ok := ContractBalanceFromContractData(entry, p.networkPassphrase); ok {
		holderStr, err := strkey.Encode(strkey.VersionByteContract, holder[:])
		if err == nil {
			transformedData.ContractDataBalanceHolder = holderStr
			transformedData.ContractDataBalance = balance.String()
		}
	}

	// Store in database
	if err := p.storeContractData(ctx, transformedData); err != nil {
		p.stats.mu.Lock()
		p.stats.FailedChanges++
		p.stats.mu.Unlock()
		return fmt.Errorf("failed to store contract data: %w", err)
	}

	p.stats.mu.Lock()
	p.stats.SuccessfulChanges++
	p.stats.LastProcessedLedger = uint32(ledgerSeq)
	p.stats.LastUpdateTime = time.Now()
	p.stats.mu.Unlock()

	// Forward to next processors
	for _, processor := range p.processors {
		if err := processor.Process(ctx, Message{Payload: transformedData}); err != nil {
			return fmt.Errorf("processor error: %w", err)
		}
	}

	return nil
}

func (p *ContractDataProcessor) processSorobanEvent(ctx context.Context, event Event) error {
	// Check if we're watching this contract
	p.mu.RLock()
	_, watching := p.watchedContracts[event.ContractID]
	p.mu.RUnlock()
	if !watching {
		return nil
	}

	// Parse the ledger closed time
	var closedAt time.Time
	if timestamp, err := time.Parse(time.RFC3339, event.LedgerClosedAt); err == nil {
		closedAt = timestamp
	} else {
		// If parsing fails, use current time as fallback
		closedAt = time.Now().UTC()
	}

	// Convert to contract data format
	transformedData := ContractDataOutput{
		ContractId:         event.ContractID,
		LastModifiedLedger: uint32(event.Ledger),
		LedgerSequence:     uint32(event.Ledger),
		ClosedAt:           closedAt,
	}

	// Store in database
	if err := p.storeContractData(ctx, transformedData); err != nil {
		return fmt.Errorf("failed to store contract data: %w", err)
	}

	// Forward to next processors
	for _, processor := range p.processors {
		if err := processor.Process(ctx, Message{Payload: transformedData}); err != nil {
			return fmt.Errorf("processor error: %w", err)
		}
	}

	return nil
}

// GetStats returns current processing statistics
func (p *ContractDataProcessor) GetStats() ContractProcessingStats {
	p.stats.mu.RLock()
	defer p.stats.mu.RUnlock()
	return p.stats
}

// GetLatestLedger returns the last processed ledger number
func (p *ContractDataProcessor) GetLatestLedger() uint32 {
	p.stats.mu.RLock()
	defer p.stats.mu.RUnlock()
	return p.stats.LastProcessedLedger
}

func (p *ContractDataProcessor) Close() error {
	return p.db.Close()
}

// Helper function to check if ledger has been processed
func (p *ContractDataProcessor) isLedgerProcessed(ledger uint32) bool {
	p.mu.RLock()
	defer p.mu.RUnlock()
	return p.processedLedgers[ledger]
}

// Helper function to mark ledger as processed
func (p *ContractDataProcessor) markLedgerProcessed(ledger uint32) {
	p.mu.Lock()
	defer p.mu.Unlock()
	p.processedLedgers[ledger] = true
}

func (p *ContractDataProcessor) storeContractData(ctx context.Context, data ContractDataOutput) error {
	query := `
        INSERT INTO contract_data (
            contract_id, contract_key_type, contract_durability, asset_code,
            asset_issuer, asset_type, balance_holder, balance,
            last_modified_ledger, ledger_entry_change, deleted, closed_at,
            ledger_sequence, ledger_key_hash
        )
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ON CONFLICT (contract_id, ledger_sequence, ledger_key_hash) 
        DO UPDATE SET
            contract_key_type = EXCLUDED.contract_key_type,
            contract_durability = EXCLUDED.contract_durability,
            asset_code = EXCLUDED.asset_code,
            asset_issuer = EXCLUDED.asset_issuer,
            asset_type = EXCLUDED.asset_type,
            balance_holder = EXCLUDED.balance_holder,
            balance = EXCLUDED.balance,
            last_modified_ledger = EXCLUDED.last_modified_ledger,
            ledger_entry_change = EXCLUDED.ledger_entry_change,
            deleted = EXCLUDED.deleted,
            closed_at = EXCLUDED.closed_at
    `

	_, err := p.db.ExecContext(ctx, query,
		data.ContractId,
		data.ContractKeyType,
		data.ContractDurability,
		data.ContractDataAssetCode,
		data.ContractDataAssetIssuer,
		data.ContractDataAssetType,
		data.ContractDataBalanceHolder,
		data.ContractDataBalance,
		data.LastModifiedLedger,
		data.LedgerEntryChange,
		data.Deleted,
		data.ClosedAt,
		data.LedgerSequence,
		data.LedgerKeyHash,
	)

	if err != nil {
		return fmt.Errorf("failed to store contract data: %w", err)
	}

	return nil
}
